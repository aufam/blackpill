#ifndef PROJECT_PERIPH_PWM_H
#define PROJECT_PERIPH_PWM_H

#include "tim.h"

namespace Project::Periph {

    /// PWM generation. requirements: TIMx PWM generation mode, TIMx global interrupt
    struct PWM{
        /// callback function class
        struct Callback {
            typedef void (*Function)(void *);
            Function fn;
            void *arg;
        };
        inline static Callback *halfCBChain = nullptr;
        inline static Callback *fullCBChain = nullptr;

        TIM_HandleTypeDef &htim; ///< tim handler generated by cubeMX
        Callback halfCB = {};
        Callback fullCB = {};
        constexpr explicit PWM(TIM_HandleTypeDef &htim) : htim(htim) {}

        /// initiation. set prescaler, period, and pulse
        /// @param prescaler TIMx->PSC
        /// @param period TIMx->ARR
        /// @param pulse TIMx->CCRy
        /// @param channel TIM_CHANNEL_y
        /// @param halfCBFn half complete callback function pointer
        /// @param halfCBArg half complete callback function argument
        /// @param fullCBFn complete callback function pointer
        /// @param fullCBArg complete callback function argument
        void init(uint16_t prescaler, uint32_t period, uint32_t pulse, uint32_t channel,
                  Callback::Function halfCBFn = nullptr, void *halfCBArg = nullptr,
                  Callback::Function fullCBFn = nullptr, void *fullCBArg = nullptr);
        /// set callback
        /// @param halfCBFn half complete callback function pointer
        /// @param halfCBArg half complete callback function argument
        /// @param fullCBFn complete callback function pointer
        /// @param fullCBArg complete callback function argument
        void setCallback(
                Callback::Function halfCBFn = nullptr, void *halfCBArg = nullptr,
                Callback::Function fullCBFn = nullptr, void *fullCBArg = nullptr);

        void start(uint32_t channel);
        void stop(uint32_t channel);

        void setPrescaler(uint16_t prescaler) const;
        void setPeriod(uint32_t period) const;
        void setPulse(uint32_t pulse, uint32_t channel) const;

        uint16_t getPrescaler() const;
        uint32_t getPeriod() const;
        uint32_t getPulse(uint32_t channel) const;
    };

    /// PWM generation timer 2 channel 1
    inline PWM pwm2(htim2);

}

#endif //PROJECT_PERIPH_PWM_H
